import 'dart:io';
import 'package:intl/intl.dart'; // For currency formatting and date formatting
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';

class PdfService {
  // Function to generate PDF receipt
  Future<File> generatePdfReceipt({
    required String title,
    required String amount,
    required String date, // payment_timestamp
    required String paymentMethod,
    required String ownerName,
    required String flatNo,
    required String paymentStatus,
  }) async {
    try {
      final pdf = pw.Document();

      // Format date and time from the timestamp
      final DateTime parsedTimestamp =
          DateFormat('dd MMM yyyy HH:mm').parse(date);
      final String formattedDate =
          DateFormat('dd MMM yyyy').format(parsedTimestamp); // Date only
      final String formattedTime =
          DateFormat('HH:mm').format(parsedTimestamp); // Time only

      // Adding content to the PDF with enhanced design and table format
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          margin: pw.EdgeInsets.all(32), // Add margin to the page
          build: (context) => pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Application Name (FlatMate) at the top
              pw.Text("FlatMate",
                  style: pw.TextStyle(
                      fontSize: 32, fontWeight: pw.FontWeight.bold)),
              pw.SizedBox(height: 8),

              // Title and Header
              pw.Text("Payment Receipt",
                  style: pw.TextStyle(
                      fontSize: 24, fontWeight: pw.FontWeight.bold)),
              pw.SizedBox(height: 16),
              pw.Divider(thickness: 2), // Add a divider for design

              // Receipt Details Table
              pw.SizedBox(height: 24),
              pw.Table(
                columnWidths: {
                  0: pw.FixedColumnWidth(150),
                  1: pw.FlexColumnWidth(),
                },
                border: pw.TableBorder.all(
                    color: PdfColors.grey), // Add table border
                children: [
                  _buildTableRow('Title:', title),
                  _buildTableRow('Amount:', amount, PdfColors.green),
                  _buildTableRow('Owner Name:', ownerName),
                  _buildTableRow('Flat No:', flatNo),
                  _buildTableRow(
                      'Payment Status:', paymentStatus, PdfColors.blue),
                  _buildTableRow('Date:', formattedDate),
                  _buildTableRow('Time:', formattedTime),
                  _buildTableRow('Payment Method:', paymentMethod),
                ],
              ),

              // Footer
              pw.SizedBox(height: 24),
              pw.Divider(thickness: 2),
              pw.SizedBox(height: 16),
              pw.Text("Thank you for your payment!",
                  style: pw.TextStyle(
                      fontSize: 14,
                      fontStyle: pw.FontStyle.italic,
                      color: PdfColors.blue)),

              // // // FlatMate at the bottom of the page
              // // pw.SizedBox(height: 40),
              // // pw.Align(
              // //   alignment: pw.Alignment.centerRight,
              // //   child: pw.Text("Generated by FlatMate",
              // //       style: pw.TextStyle(
              // //           fontSize: 12, fontStyle: pw.FontStyle.italic)),
              // ),
            ],
          ),
        ),
      );

      // Get a temporary directory to save the PDF
      final output = await getTemporaryDirectory();
      final file = File("${output.path}/receipt.pdf");

      // Save the PDF file
      await file.writeAsBytes(await pdf.save());
      print('PDF generated successfully at: ${file.path}'); // Debug statement
      return file;
    } catch (e) {
      print(
          'Error generating PDF: $e'); // Catch any errors during PDF generation
      rethrow; // Rethrow to allow handling in the calling function
    }
  }

  // Helper function to build a table row
  pw.TableRow _buildTableRow(String label, String value,
      [PdfColor? valueColor]) {
    return pw.TableRow(
      children: [
        pw.Padding(
          padding: pw.EdgeInsets.all(8),
          child: pw.Text(label,
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
              )),
        ),
        pw.Padding(
          padding: pw.EdgeInsets.all(8),
          child: pw.Text(value,
              style: pw.TextStyle(
                fontSize: 14,
                color: valueColor ??
                    PdfColors.black, // Default to black if no color is provided
              )),
        ),
      ],
    );
  }
}
